{
  //Veritabanýyla ilgili iþlemler gerçekleþtiriliyor.ConnectionString de diyebiliriz ama
  //Ben sadece ConnectionString vermeyeceðim veritabanýnýn ismini,Collectionlarýn ismini vericeðim o yüzden
  "DatabaseSetting": {
    "CourseCollectionName": "Courses",
    "CategoryColelctionName": "Categories",
    "ConnectionStrings": "mongodb://localhost:27017", //ben þuan da localde çalýþýyoruz.Bu yüzden mongodb ye baðlanýrken ayaða kalktýðý porttunu yazýyorsun
    //bu burdaki connectionStringle dockerla ayaða kaldýrdýðýmda localhost diye birþey yok eðer sen uygulamaný dockerize edeceksen
    //kesinlikle kodlama içerisinde hurt kod olarak localhost barýndýrmamýz gerekiyor.çüNKÜ
    //dockerize ettiðinde dockerlarýn içinde localhost diye kavram yok .Gerçekten canlý da serverda
    //ayaða kalkmýþ þekilde bildiðinlendiriller.O yüzden ben ne yapmam lazým dockerize tarafýnda
    //Connectionstringi ezmem gerekicek.Ötekileri ezmeme gerek yok.Enverament deðiþken belirleyeceðim .localhost'a benim containerýn ismim gelecek.Hangi enveramentla kalkacak sa onun gelmesi gerekicek
    //þimdi benim buradaki alanlarý herhangi servisin içerisine herhangi kodlamýn içerisinde 
    //kolay bir þekilde okuayabilmem için class üzerine alayým yukardaki araadaþlarý class üzerinde eriþeyim.Ben istersem
    //appsetting içerisindeki tüm deðerlerimi Startup.cs deki Iconfiguration her hangi bir classa geçerek okuyabilirim.
    //ama okurken de Configuration dedikten sonra void ConfigurationService gelip Configuration[]þeklinde appsetting deki alanlara koyup : üst üste koyup bakmam gerekecek
    //o yüzden ben configuration ayarlarýný bir class üzerinden okuyalým bunun adýna optionspading deniliyor.Configurationu bir sýnýf üzerine alarak.Okuma iþlemi denir. 

    "DatabaseName": "CatalogDb"
  },
    "Logging": {
      "LogLevel": {
        "Default": "Information",
        "Microsoft": "Warning",
        "Microsoft.Hosting.Lifetime": "Information"
      }
    },
    "AllowedHosts": "*"
  }
